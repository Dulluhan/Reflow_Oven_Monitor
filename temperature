$NOLIST
;---------------------------------

$include(math32.asm)

T_7seg:
    DB 0C0H, 0F9H, 0A4H, 0B0H, 099H
    DB 092H, 082H, 0F8H, 080H, 090H
    DB 088H, 083H

; Configure the serial port and baud rate using timer 2
;InitSerialPort:
;       clr TR2 ; Disable timer 2
;       mov T2CON, #30H ; RCLK=1, TCLK=1
;       mov RCAP2H, #high(T2LOAD)
;       mov RCAP2L, #low(T2LOAD)
;       setb TR2 ; Enable timer 2
;       mov SCON, #52H
;       ret

; Send a character through the serial port
putchar:
    JNB TI, putchar
    CLR TI
    MOV SBUF, a
    RET

; Send a constant-zero-terminated string through the serial port
SendString:
    CLR A
    MOVC A, @A+DPTR
    JZ SSDone
    LCALL putchar
    INC DPTR
    SJMP SendString
SSDone:
    ret

Delay:
        mov R2, #90
Lz: mov R1, #250
Ly: mov R0, #250
Lx: djnz R0, Lx
        djnz R1, Ly
        djnz R2, Lz
        ret
;--------------------------------------------------

Display_BCD:

        mov dptr, #T_7seg

        mov a, bcd+1
        ;swap a
        anl a, #0FH
        movc a, @a+dptr
        mov HEX3, a

        mov a, bcd+0
        swap a
        anl a, #0FH
        movc a, @a+dptr
        mov HEX2, a

        mov a, bcd+0
;       swap a
        anl a, #0FH
        movc a, @a+dptr
        mov HEX1, a

        mov HEX0, #10100111b

        ret
;--------------------------------------------------
CheckCH0: ; this finds the temp of the LM335
        clr CE_ADC
        mov R0, #00000001B ; Start bit:1
        lcall DO_SPI_G

        mov R0, #10000000B ; Single-ended, channel 0
        lcall DO_SPI_G

        mov a, R1 ; bits 8 and 9
        anl a, #03H ; Make sure other bits are zero
        mov x+1, a
        mov R0, #55H ; It doesn't matter what we transmit...
        lcall DO_SPI_G

        mov x+0, R1
        mov x+2, #0
        mov x+3, #0
        setb CE_ADC

        load_y(5000)
        lcall mul32

        load_y(1023)
        lcall div32

        load_y(2830)
        lcall sub32

        mov r3,x ; r3 now holds lm335 temp

        clr CE_ADC
        mov R0, #00000001B ; Start bit:1
        lcall DO_SPI_G

        mov R0, #10010000B ; Single ended, read channel 1
        lcall DO_SPI_G

        mov a, R1 ; bits 8 and 9
        anl a, #03H ; Make sure other bits are zero
        mov x+1,a
        mov R0, #55H ; It doesn't matter what we transmit...
        lcall DO_SPI_G
        mov a, R1 ; bits 7 - 0
        setb CE_ADC

        mov x+0, R1
        mov x+2, #0
        mov x+3, #0

        load_y(5000)
        lcall mul32

        load_y(1023)
        lcall div32

        mov y+0, x+0
        mov y+1, x+1
        mov y+2, x+2
        mov y+3, x+3

        load_x(1)

        lcall div32

        mov x+0, y+0
        mov x+1, x+1
        mov x+2, y+2
        mov x+3, y+3

        load_y(50) ; this needs to be changed tho... 99% sure it's the wrong value
        lcall mul32

        load_y(1023) ; we do this because the first one would be load_y(0008.2)...
        lcall div32  ; which we can't do. Just trying this to compensate.

        mov y+0, r3
        mov y+1, #0
        mov y+2, #0
        mov y+3, #0
        setb CE_ADC

        lcall add32

        load_y(940)
        lcall sub32

        mov r3,x

        mov TemperatureThermo,r3

        lcall hex2bcd ; hex to decimal conversion and display stuff below

        lcall Display_BCD
        ;lcall Delay

;       lcall temperature                                       ;;PUTCHAR??... spi maybe
;       lcall Delay
        ret
temperature:

        mov a, bcd+1
        swap a
        anl a, #0FH
        orl a, #30H
        lcall putchar
        mov a, bcd+1
        anl a, #0FH
        orl a, #30h
        lcall putchar

        mov a, bcd+0
        swap a
        anl a, #0FH
        orl a, #30H
        lcall putchar

        mov a, #'.'
        lcall putchar

        mov a, bcd+0
        anl a, #0FH
        orl a, #30h
        lcall putchar

        mov a, #'\r'
        lcall putchar

        mov a, #'\n'
        lcall putchar

        ret

;-------------------------------------------------------
;--------------------------------------------------
INI_SPI:
orl P0MOD, #00000110b ; Set SCLK, MOSI as outputs
anl P0MOD, #11111110b ; Set MISO as input
clr SCLK ; Mode 0,0 default
ret

DO_SPI_G:
mov R1, #0 ; Received byte stored in R1
mov R2, #8 ; Loop counter (8-bits)
DO_SPI_G_LOOP:
mov a, R0 ; Byte to write is in R0
rlc a ; Carry flag has bit to write
mov R0, a
mov MOSI, c
setb SCLK ; Transmit
mov c, MISO ; Read received bit
mov a, R1 ; Save received bit in R1
rlc a
mov R1, a
clr SCLK
djnz R2, DO_SPI_G_LOOP
ret



END
